<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://blogawesome.com/' rel='self' type='application/rss+xml'/>
<generator>
clj-rss
</generator>
<title>
The Vast Ocean
</title>
<link>
http://blogawesome.com/
</link>
<description>
about software from here and there
</description>
<lastBuildDate>
Sun, 05 Jul 2015 23:47:43 +0200
</lastBuildDate>
<item>
<guid>
http://blogawesome.com/posts/2015-07-05-hello-cryogen.html
</guid>
<link>
http://blogawesome.com/posts/2015-07-05-hello-cryogen.html
</link>
<title>
Hello Cryogen.. Goodbye Python.. Hello Clojure
</title>
<description>
&lt;p&gt;it has been some time since I last wrote a blog post. I daresay, alot happened since then. I finished my exams YAY!.&lt;/p&gt;&lt;p&gt;anyway I am changing again the back end of this blog. not that I had much trouble wth jekyll. but long story short, I was learning &lt;a href='www.clojure.org'&gt;Clojure&lt;/a&gt; and then I decided to make a blog and then I wanted an engine so I came back full circle to gh pages and that's it. &lt;br/&gt;&lt;h2&gt;&lt;a name=&quot;clojure&quot;&gt;&lt;/a&gt;Clojure&lt;/h2&gt;&lt;img src=&quot;http://clojure.org/file/view/clojure-icon.gif&quot; alt=&quot;clojure logo&quot; /&gt;&lt;br/&gt;&lt;a href='www.clojure.org'&gt;Clojure&lt;/a&gt; is a functional language and a child of &lt;a href='https://en.wikipedia.org/wiki/Lisp&amp;#95;%28programming&amp;#95;language%29'&gt;lisp&lt;/a&gt; that is based on the &lt;a href='https://en.wikipedia.org/wiki/Java&amp;#95;virtual&amp;#95;machine'&gt;JVM&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;clojure has a pragmatic approach to functional programming hence the java interop to make use of the big ammount of java libraries.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;h3&gt;&lt;a name=&quot;what&amp;#95;i&amp;#95;like&amp;#95;about&amp;#95;clojure&quot;&gt;&lt;/a&gt;What I like about clojure&lt;/h3&gt;&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;&lt;strong&gt;clojure&amp;#95;is&amp;#95;fun&lt;/strong&gt;&quot;&gt;&lt;/a&gt;&lt;strong&gt;Clojure is fun&lt;/strong&gt;&lt;/h4&gt;that's pretty much it. higher order functions are cool. functional programming makes for an elegant and concise code. I am not an expert on this matter and I don't do &lt;em&gt;clojure&lt;/em&gt; for a living but I think I am being honest when I say I enjoy functional programming.&lt;h4&gt;&lt;a name=&quot;&lt;strong&gt;dynamic&amp;#95;but&amp;#95;not&amp;#95;slow&lt;/strong&gt;&quot;&gt;&lt;/a&gt;&lt;strong&gt;dynamic but not slow&lt;/strong&gt;&lt;/h4&gt;&lt;em&gt;clojure&lt;/em&gt; is dynamically typed which allows interesting stuff like the &lt;strong&gt;Repl&lt;/strong&gt;but clojure still miles ahead of &lt;em&gt;python&lt;/em&gt; in terms of speed while keeping its memory requirements slow.&lt;h4&gt;&lt;a name=&quot;&lt;strong&gt;more&amp;#95;functions&amp;#95;than&amp;#95;python&lt;/strong&gt;&quot;&gt;&lt;/a&gt;&lt;strong&gt;more functions than python&lt;/strong&gt;&lt;/h4&gt;this one is not based on actual data. but &lt;em&gt;clojure&lt;/em&gt; is functional so it stresses on more functions and less types of data. and hence more common operations. for example to get the first item in an list in &lt;em&gt;python&lt;/em&gt; you would write&lt;pre&gt;&lt;code&gt;alist&amp;#91;0&amp;#93;
&lt;/code&gt;&lt;/pre&gt;and in a nested list&lt;pre&gt;&lt;code&gt;alist&amp;#91;0&amp;#93;&amp;#91;0&amp;#93;
&lt;/code&gt;&lt;/pre&gt;and here is the weird thing in &lt;em&gt;clojure&lt;/em&gt; you would write&lt;pre&gt;&lt;code&gt;&amp;#40;first alist&amp;#41;
&lt;/code&gt;&lt;/pre&gt;and in a nested list&lt;pre&gt;&lt;code&gt;&amp;#40;ffirst alist&amp;#41;
&lt;/code&gt;&lt;/pre&gt;you are probaply thinking that this is redundant and you might be true but I think that if an operation is repeated so much time then it is worth it to make a shortcut for it.&lt;h4&gt;&lt;a name=&quot;&lt;strong&gt;innovative&amp;#95;community&lt;/strong&gt;&quot;&gt;&lt;/a&gt;&lt;strong&gt;innovative community&lt;/strong&gt;&lt;/h4&gt;although I believe the clojure community is quite small, they seem quite enthusiastic about their language and they keep comming up with cool ideas and those cool ideas/libraries are what attracted me to clojue in the first place.&lt;p&gt;I would like to mention &lt;a href='https://github.com/clojure/core.logic'&gt;core.logic&lt;/a&gt;, &lt;a href='https://github.com/clojure/core.match'&gt;core.match&lt;/a&gt;, &lt;a href='https://github.com/clojure/core.typed'&gt;core.typed&lt;/a&gt;, and &lt;a href='https://github.com/clojure/clojurescript'&gt;clojurescript&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>
Sun, 05 Jul 2015 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts/2015-04-05-radio-terminal.html
</guid>
<link>
http://blogawesome.com/posts/2015-04-05-radio-terminal.html
</link>
<title>
How I streamed an online radio station through the terminal
</title>
<description>
&lt;p&gt;the radio station in this post is the quran radio station at &lt;a href='http://www.ertu.org/quran/QuranKareem.html'&gt;Quran Radio Website&lt;/a&gt;.in this post I will explain in detail how I could stream the station through the terminal. if you just want to know the how-to skip to the end of this post.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;website&quot;&gt;&lt;/a&gt;The website&lt;/h2&gt;in the beginning, I wanted to get the streaming link the website uses to recieve the data. the website uses &lt;a href='http://www.jwplayer.com/'&gt;JWPlayer&lt;/a&gt; to stream the radio.Using the web browser's developer tools I found the script used to stream the radio station. the script included the url of the streamed data. after that I inspected the network tab. I found out that the website uses &lt;a href='http://en.wikipedia.org/wiki/Real&amp;#95;Time&amp;#95;Messaging&amp;#95;Protocol'&gt;RTMP&lt;/a&gt; protocol to communicate with the server.&lt;br/&gt;&lt;img src=&quot;/img/radio-web.png&quot; alt=&quot;getting the stream url&quot; title= &quot;a photo for an browser inspector&quot; /&gt;&lt;h2&gt;&lt;a name=&quot;rtmp&quot;&gt;&lt;/a&gt;RTMP&lt;/h2&gt;after some google search, I stumbled upon rtmpdump &lt;a href='https://rtmpdump.mplayerhq.hu/'&gt;rtmpdump&lt;/a&gt;. as the name suggests, it dumps a stream of rtmp station into a file or the stdin.But there is a catch. there are some parameters you need to set otherwise you will get a connection error.so how do I get the parameters? enter &lt;a href='https://www.wireshark.org/'&gt;wireshark&lt;/a&gt;.&lt;h2&gt;&lt;a name=&quot;wireshark&quot;&gt;&lt;/a&gt;wireshark&lt;/h2&gt;through &lt;i&gt;wireshark&lt;/i&gt;, I tracked the packets with the &lt;i&gt;RTMP&lt;/i&gt; protocol. I investigated the headers of those packets and used them as parameters for &lt;i&gt;rtmpdump&lt;/i&gt; and after some trial and error I finally got a connection. I pipelined the stream to the &lt;a href='http://mpv.io/'&gt;mpv player&lt;/a&gt; and it ran without GUI, efficently reading the stream.
</description>
<pubDate>
Sun, 05 Apr 2015 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts/2015-02-14-making-a-static-website.html
</guid>
<link>
http://blogawesome.com/posts/2015-02-14-making-a-static-website.html
</link>
<title>
 let's make a blog in 2 minutes
</title>
<description>
&lt;h3&gt;&lt;a name=&quot;making&amp;#95;a&amp;#95;blog&amp;#95;as&amp;#95;a&amp;#95;static&amp;#95;website&quot;&gt;&lt;/a&gt;making a blog as a static website&lt;/h3&gt;&lt;p&gt;In this brief post I will be talking about making a blog using a static website generator. One of the famous ones is &lt;a href='http://jekyllrb.com/'&gt;Jekyll&lt;/a&gt;. also, I will talk about the advantage of a static website.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;why&amp;#95;a&amp;#95;static&amp;#95;website?&quot;&gt;&lt;/a&gt;why a static website?&lt;/h3&gt;you might be wondering why would you use a static website. afterall, they are dumb and can't do much. but using a static website comes with benefits too.&lt;ol&gt;&lt;li&gt;easy to host: static website can be hosted on any hosting provide because every server provides the user with front-end data at the end.&lt;/li&gt;&lt;li&gt;easy to modify: you can modify your websites very easily. you don't need to handle wierd database and back-end issues. you can install themes instantly.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;a name=&quot;what&amp;#95;is&amp;#95;jekyll?&quot;&gt;&lt;/a&gt;what is jekyll?&lt;/h3&gt;jekyll is a &lt;a href='https://en.wikipedia.org/wiki/Ruby&amp;#95;%28programming&amp;#95;language%29'&gt;ruby&lt;/a&gt; &lt;a href='https://en.wikipedia.org/wiki/RubyGems'&gt;gem&lt;/a&gt; that tries to take away the tediousness and repition of managing your static website.jekyll does the following.&lt;ol&gt;&lt;li&gt;templating: jekyll allows easy management of templates and layouts you don't have to copy paste stuff just include the relevant files.&lt;/li&gt;&lt;li&gt;posts management: jekyll easily manages your posts. you simply use the markdown format to write your posts and put them in the &lt;i&gt;posts&lt;/i&gt; directoy. jekyll allows also tags, categories and drafts.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;a name=&quot;getting&amp;#95;started&amp;#95;with&amp;#95;jekyll&quot;&gt;&lt;/a&gt;getting started with jekyll&lt;/h3&gt;getting started with jekyll is very easyif you know &lt;a href='https://en.wikipedia.org/wiki/Git&amp;#95;(software'&gt;git&lt;/a&gt;). simply, make a repo. download a theme form &lt;a href='http://jekyllthemes.org/'&gt;jekyll themes&lt;/a&gt; and start writing your posts. yes, it is that easy. it also comes with free hosting supported by &lt;a href='http://github.com/'&gt;Github&lt;/a&gt;.&lt;br&gt;&lt;h3&gt;&lt;a name=&quot;closing&amp;#95;statement&quot;&gt;&lt;/a&gt;closing statement&lt;/h3&gt;making your blog is very easy with jekyll. this blog is already using jekyll. stay tuned for more posts.&lt;br&gt;
</description>
<pubDate>
Sat, 14 Feb 2015 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts/2015-02-09-three-in-a-row.html
</guid>
<link>
http://blogawesome.com/posts/2015-02-09-three-in-a-row.html
</link>
<title>
A solver for three-in-a-row-puzzle
</title>
<description>
&lt;p&gt;I was happy I got an A+ in the constraint programming course and I was bored, so I decided to make a solver for a puzzle. Although I found out later the grades were somehow inflated, I like to make stuff like that. In this post I will explain how I did a solver for an online puzzle. including the &lt;em&gt;javascript&lt;/em&gt; code to read the puzzle and to post the answers back. &lt;br&gt; &lt;br&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;the&amp;#95;puzzle&quot;&gt;&lt;/a&gt;The puzzle&lt;/h3&gt;the puzzle is called three-in-a-row you can play it online &lt;a href='http://www.brainbashers.com/3inarow.asp'&gt;here&lt;/a&gt; . essentially, you have two fill the grid with white and blue blocks such that, no three consecutive blocks have the same color. besides, every row and every column should have an equal number of white and blue blocks.&lt;br&gt;&lt;img src=&quot;/images/puzzle-empty.png&quot; alt=&quot;empty puzzle example&quot; title= &quot;a photo for an empty puzzle&quot; /&gt;&lt;br&gt;&lt;br&gt;&lt;h3&gt;&lt;a name=&quot;the&amp;#95;code&quot;&gt;&lt;/a&gt;The code&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;input code: a &lt;em&gt;javascript&lt;/em&gt; code to read the locations of filled blocks&lt;/li&gt;&lt;li&gt;constraint solving: a &lt;em&gt;python&lt;/em&gt; code to find the solution&lt;/li&gt;&lt;li&gt;output code: a &lt;em&gt;javascript&lt;/em&gt; code given the solutions it fills the grid with the right blocks. we don't want to click on those blocks manually do we?&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;the&amp;#95;input&quot;&gt;&lt;/a&gt;The input&lt;/h3&gt;I wrote a simple &lt;em&gt;javascript&lt;/em&gt; code that loops over the table cells and produces two arrays, &lt;strong&gt;whites&lt;/strong&gt; and &lt;strong&gt;blues&lt;/strong&gt;. the arrays contain the locations of the blue and white blocks and are later printed through the browser javascript console&lt;p&gt;{% highlight javascript %} my_table = document.getElementsByClassName('inarowtable')[0]&lt;/p&gt;&lt;p&gt;whites=[] blues=[] for (var i=1; i&lt; my_table.rows.length; i++){  var base = (i-1) * (my_table.rows.length-1);   for (var j=0; j&lt; my_table.rows[0].cells.length-1; j++){&lt;pre&gt;&lt;code&gt;var cell = my&amp;#95;table.rows&amp;#91;i&amp;#93;.cells&amp;#91;j&amp;#93;;
var class&amp;#95;name = cell.className;
if &amp;#40;class&amp;#95;name.indexOf&amp;#40;&amp;quot;white&amp;quot;&amp;#41; &amp;gt;-1 &amp;#41;{
  whites.push&amp;#40;base+j+1&amp;#41;;
}else if &amp;#40;class&amp;#95;name.indexOf&amp;#40;&amp;quot;black&amp;quot;&amp;#41; &amp;gt;0 &amp;#41;{
  blues.push&amp;#40;base+j+1&amp;#41;;
} 
&lt;/code&gt;&lt;/pre&gt;  } } console.log(whites.toString()); console.log(blues.toString()); {% endhighlight %}&lt;/p&gt;&lt;p&gt;&lt;br&gt; &lt;br&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;the&amp;#95;solver&quot;&gt;&lt;/a&gt;The solver&lt;/h3&gt;I use the &lt;a href='https://code.google.com/p/or-tools/'&gt;or-tools library&lt;/a&gt; for the solver. it iswritten in &lt;em&gt;C++&lt;/em&gt; and has bindings for &lt;em&gt;python&lt;/em&gt; which of course is usually easier to code in. you need to install the &lt;em&gt;ortools&lt;/em&gt; python package to run the solver code&lt;br&gt;for those of you unfamiliar with &lt;a href='http://en.wikipedia.org/wiki/Constraint&amp;#95;programming'&gt;constraint programming&lt;/a&gt;, it is a paradigm concerned with assigning values to variables by shrinking their domain using added constraints and then searching through remaining domain for possible solutions.&lt;h4&gt;&lt;a name=&quot;the&amp;#95;variables&quot;&gt;&lt;/a&gt;The variables&lt;/h4&gt;agrid of N x N variables where N is the width of the table. each cell could either be &lt;em&gt;blue&lt;/em&gt; or &lt;em&gt;white&lt;/em&gt;  so, I represent it with a 0 or 1.&lt;h4&gt;&lt;a name=&quot;the&amp;#95;constraints&quot;&gt;&lt;/a&gt;The constraints&lt;/h4&gt;the constraints are very easy to express &lt;ol&gt;&lt;li&gt;no three cells of the same color in a row, so the sum of every three consecutive cells cannot be zero nor three&lt;/li&gt;&lt;li&gt;equal number of whites and blues in all rows and columns, so the sum of every row and column is exactly seven&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;&lt;a name=&quot;the&amp;#95;input&quot;&gt;&lt;/a&gt;The input&lt;/h4&gt;the input is simply the size of the grid and the blue and white arrays we got earlier&lt;br&gt;&lt;h4&gt;&lt;a name=&quot;the&amp;#95;code&quot;&gt;&lt;/a&gt;The code&lt;/h4&gt;&lt;p&gt;{% highlight python %} from ortools.constraint_solver import pywrapcp&lt;/p&gt;&lt;p&gt;def main(dimension, whites, blues):&lt;pre&gt;&lt;code&gt;solver = pywrapcp.Solver&amp;#40;&amp;quot;three in a row&amp;quot;&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;line = range&amp;#40;0, dimension&amp;#41;
grid = {} 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;for i in line:
    for j in line:
        grid&amp;#91;&amp;#40;i, j&amp;#41;&amp;#93; = solver.IntVar&amp;#40;0, 1&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# set whites and blues
for i in whites:
    solver.Add&amp;#40;grid&amp;#91;&amp;#40;&amp;#40;i - 1&amp;#41; / dimension, &amp;#40;i - 1&amp;#41; % dimension&amp;#41;&amp;#93; == 0&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;for i in blues:
    solver.Add&amp;#40;grid&amp;#91;&amp;#40;&amp;#40;i - 1&amp;#41; / dimension, &amp;#40;i - 1&amp;#41; % dimension&amp;#41;&amp;#93; == 1&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# vertically three in a row
for i in range&amp;#40;0, dimension - 2&amp;#41;:
    for j in line:
        solver.Add&amp;#40;
            &amp;#40;solver.Sum&amp;#40;&amp;#91;
                grid&amp;#91;&amp;#40;i, j&amp;#41;&amp;#93;,
                grid&amp;#91;&amp;#40;&amp;#40;i + 1&amp;#41;, j&amp;#41;&amp;#93;,
                grid&amp;#91;&amp;#40;&amp;#40;i + 2&amp;#41;, j&amp;#41;&amp;#93;&amp;#93;
            &amp;#41; % 3&amp;#41;
            &amp;gt; 0&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# horizontally three in a row
for j in range&amp;#40;0, dimension - 2&amp;#41;:
    for i in line:
        solver.Add&amp;#40;
            &amp;#40;solver.Sum&amp;#40;&amp;#91;
                grid&amp;#91;&amp;#40;i, j&amp;#41;&amp;#93;,
                grid&amp;#91;&amp;#40;i, &amp;#40;j + 1&amp;#41;&amp;#41;&amp;#93;,
                grid&amp;#91;&amp;#40;i, &amp;#40;j + 2&amp;#41;&amp;#41;&amp;#93;&amp;#93;
            &amp;#41; % 3&amp;#41;
            &amp;gt; 0&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# every row equal blue and white
for i in line:
    solver.Add&amp;#40;solver.Sum&amp;#40;&amp;#91;grid&amp;#91;&amp;#40;i, j&amp;#41;&amp;#93; for j in line&amp;#93;&amp;#41; == dimension / 2&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# every col equal blue and white
for j in line:
    solver.Add&amp;#40;solver.Sum&amp;#40;&amp;#91;grid&amp;#91;&amp;#40;i, j&amp;#41;&amp;#93; for i in line&amp;#93;&amp;#41; == dimension / 2&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;all&amp;#95;vars = &amp;#91;grid&amp;#91;&amp;#40;i, j&amp;#41;&amp;#93; for i in line for j in line&amp;#93; 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;vars&amp;#95;phase = solver.Phase&amp;#40;all&amp;#95;vars,
                          solver.INT&amp;#95;VAR&amp;#95;SIMPLE,
                          solver.INT&amp;#95;VALUE&amp;#95;SIMPLE&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;solution = solver.Assignment&amp;#40;&amp;#41;
solution.Add&amp;#40;all&amp;#95;vars&amp;#41;
collector = solver.FirstSolutionCollector&amp;#40;solution&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# And solve.
solver.Solve&amp;#40;vars&amp;#95;phase, &amp;#91;collector&amp;#93;&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;if collector.SolutionCount&amp;#40;&amp;#41; == 1:
    for i in line:
        print &amp;#91;int&amp;#40;collector.Value&amp;#40;0, grid&amp;#91;&amp;#40;i, j&amp;#41;&amp;#93;&amp;#41;&amp;#41; for j in line&amp;#93; 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;if &lt;b&gt;name&lt;/b&gt; == '&lt;b&gt;main&lt;/b&gt;':&lt;pre&gt;&lt;code&gt;main&amp;#40;14,
     &amp;#91;17, 22, 24, 34, 38, 49, 50, 55, 57, 58, 60, 64, 70, 82, 84, 90, 92, 93, 104, 142, 145, 146, 149, 151, 161,
      169, 174, 181, 182, 183&amp;#93;,
     &amp;#91;2, 5, 7, 19, 26, 42, 47, 66, 72, 96, 99, 102, 111, 121, 124, 125, 158, 168, 179, 190&amp;#93;&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;{% endhighlight %} &lt;br&gt; &lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;output&quot;&gt;&lt;/a&gt;The output&lt;/h2&gt;Now we have made the solver and we can get the zeros and ones that would solve the puzzle and we want to insert them in the puzzle. but those puzzles are big and it takes time to fill all the cells, why not make another javascript code to click on the blocks.&lt;br&gt;this looks like a nice idea, but javascript doesn't make that easy. fortunately, &lt;a href='http://jquery.com/'&gt;JQuery&lt;/a&gt; does. so I load JQuery into the page and then given the solution grid I fill the blocks&lt;br&gt;&lt;br&gt;&lt;h3&gt;&lt;a name=&quot;the&amp;#95;code&quot;&gt;&lt;/a&gt;The code&lt;/h3&gt;{% highlight javascript %}var jq = document.createElement('script');jq.src = &quot;https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&quot;;document.getElementsByTagName('head')[0].appendChild(jq);&lt;p&gt;solution = [[0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1]];&lt;/p&gt;&lt;p&gt;for (var i=1; i&lt; my_table.rows.length; i++){   var base = (i-1) * (my_table.rows.length-1);   for (var j=0; j&lt; my_table.rows[0].cells.length-1; j++){&lt;pre&gt;&lt;code&gt;var cell = my&amp;#95;table.rows&amp;#91;i&amp;#93;.cells&amp;#91;j&amp;#93;;
var class&amp;#95;name = cell.className;
if &amp;#40;class&amp;#95;name.indexOf&amp;#40;&amp;quot;grey&amp;quot;&amp;#41; &amp;gt;-1 &amp;#41;{
  $&amp;#40;cell&amp;#41;.trigger&amp;#40;'mouseup'&amp;#41;;
  if &amp;#40;solution&amp;#91;i-1&amp;#93;&amp;#91;j&amp;#93; == 0&amp;#41;{
    $&amp;#40;cell&amp;#41;.trigger&amp;#40;'mouseup'&amp;#41;;
  }
} 
&lt;/code&gt;&lt;/pre&gt;  } } {% endhighlight %} &lt;br&gt; &lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;in this blog post, I explained how I worte a solver for an online puzzle using &lt;em&gt;python&lt;/em&gt; and how jacascript can be used. If you have read this far then congratulations! let me know what you think in the comments.
</description>
<pubDate>
Mon, 09 Feb 2015 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts/2015-02-04-hello-blog.html
</guid>
<link>
http://blogawesome.com/posts/2015-02-04-hello-blog.html
</link>
<title>
Welcome to my blog
</title>
<description>
 &lt;p&gt;I am Happy to write the first entry in my blog. I will try to write a blog post every week about some devlopment work I made outside of study. If the week was so busy with Uni work, then I might just blog about it. this is also my first blog ever I hope a blog will be useful at some point.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;introduce&amp;#95;yourself&amp;#95;..&amp;#95;the&amp;#95;classical&amp;#95;interview&amp;#95;question&quot;&gt;&lt;/a&gt;Introduce yourself .. the classical interview question&lt;/h3&gt;&lt;br&gt;don't get me wrong. I haven't been to that many interviews. but I think it is the first question the interviewers tend to ask and for a good reason.&lt;p&gt;so to resopond I would say, it is complicated. so maybe I will take about it more later. But long story short, I am an Egyptian, Muslim, brown, CS Major with alot of defficulties in his life, or so I believe. that's it for hello blog.&lt;/p&gt;
</description>
<pubDate>
Wed, 04 Feb 2015 00:00:00 +0200
</pubDate>
</item>
</channel>
</rss>
